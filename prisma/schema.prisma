// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  dotenv   = "../.env.local"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id        String   @id @db.VarChar(255) @default(uuid(7))
  email     String   @db.VarChar(255) @unique
  fullname      String @db.VarChar(255)
  address      String? @db.Text
  password  String @db.VarChar(255)
  otp String? @db.VarChar(255)
  image String? @db.VarChar(255) @default("https://w7.pngwing.com/pngs/205/731/png-transparent-default-avatar-thumbnail.png")
  emailVerifiedAt DateTime? @map("email_verified_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roleId String? @db.VarChar(255) @map("role_id")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  role Role? @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id        String   @id @db.VarChar(255) @default(uuid(7))
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id        String   @id @db.VarChar(255) @default(uuid(7))
  name      String   @db.VarChar(255) @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId String @map("role_id") @db.VarChar(255)
  permissionId String @map("permission_id") @db.VarChar(255)
  
  // Relations
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade) 
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@id([roleId, permissionId])

  @@map("role_permissions")
}

model Studio {
  id        String   @id @db.VarChar(255) @default(uuid(7))
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @db.VarChar(255) @unique
  capacity  Int      @db.Int
  deletedAt DateTime? @map("deleted_at")

  facilities FacilityStudio[]
  schedules FilmSchedule[]

  @@map("studios")
}

model Facility {
  id        String   @id @db.VarChar(255) @default(uuid(7))
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String @db.VarChar(255)
  deletedAt DateTime? @map("deleted_at")

  studios FacilityStudio[]

  @@map("facilities")
}

model FacilityStudio{
  studioId    String @db.VarChar(255) @map("studio_id")
  facilityId  String @db.VarChar(255) @map("facility_id")

  studio      Studio @relation(fields: [studioId], references: [id], onDelete: Cascade)
  facility    Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@id([studioId, facilityId])

  @@map("facility_studio")
}

model Film{
  id          String   @id @db.VarChar(255) @default(uuid(7))
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String @db.VarChar(255)
  duration    Int @db.SmallInt
  description String @db.Text
  poster      String  @db.MediumText
  deletedAt   DateTime? @map("deleted_at")

  genres FilmGenre[]
  schedules FilmSchedule[]

  @@map("films")
}

model Genre{
  id          String   @id @db.VarChar(255) @default(uuid(7))
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String @db.VarChar(255)
  deletedAt   DateTime? @map("deleted_at")

  films FilmGenre[]

  @@map("genres")
}

model FilmGenre{
  filmId      String @db.VarChar(255) @map("film_id")
  genreId     String @db.VarChar(255) @map("genre_id")

  film        Film @relation(fields: [filmId], references: [id], onDelete: Cascade)
  genre       Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([filmId, genreId])

  @@map("film_genres")
}

model FilmSchedule{
  id          String   @id @db.VarChar(255) @default(uuid(7))
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  filmId      String @db.VarChar(255) @map("film_id")
  studioId    String @db.VarChar(255) @map("studio_id")
  showTime    DateTime @db.DateTime @map("show_time")
  price       Int @db.Int
  deletedAt   DateTime? @map("deleted_at")

  film        Film @relation(fields: [filmId], references: [id], onDelete: Cascade)
  studio      Studio @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@unique([filmId, studioId,showTime])

  @@map("film_schedules")
}